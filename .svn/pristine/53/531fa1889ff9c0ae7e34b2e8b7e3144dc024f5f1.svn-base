#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

#define MAX_CMDS 1000
#define MAX_CMD_LEN 1024

void execute_pipeline(char *cmds[], int num_cmds) {
    int pipes[num_cmds - 1][2];
    for (int i = 0; i < num_cmds - 1; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("pipe");
            exit(EXIT_FAILURE);
        }
    }

    for (int i = 0; i < num_cmds; i++) {
        pid_t pid = fork();
        if (pid == 0) {
            // Child process
            if (i != 0) {
                if (dup2(pipes[i - 1][0], STDIN_FILENO) == -1) {
                    perror("dup2");
                    exit(EXIT_FAILURE);
                }
            }
            if (i != num_cmds - 1) {
                if (dup2(pipes[i][1], STDOUT_FILENO) == -1) {
                    perror("dup2");
                    exit(EXIT_FAILURE);
                }
            }
            for (int j = 0; j < num_cmds - 1; j++) {
                close(pipes[j][0]);
                close(pipes[j][1]);
            }

            // Close all pipe ends in child processes except the ones it uses
            for (int j = 0; j < num_cmds - 1; j++) {
                if ((i != j) && (i != j + 1)) {
                    close(pipes[j][0]);
                    close(pipes[j][1]);
                }
            }

            // Execute the command
            char *args[MAX_CMD_LEN];
            char *token = strtok(cmds[i], " ");
            int arg_idx = 0;
            while (token != NULL) {
                args[arg_idx++] = token;
                token = strtok(NULL, " ");
            }
            args[arg_idx] = NULL;

            execvp(args[0], args);
            perror("execvp");
            exit(EXIT_FAILURE);
        } else if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        }
    }

    // Close all pipe ends in parent process
    for (int i = 0; i < num_cmds - 1; i++) {
        close(pipes[i][0]);
        close(pipes[i][1]);
    }

    // Wait for all child processes to finish
    for (int i = 0; i < num_cmds; i++) {
        wait(NULL);
    }
}

int main(void) {
    char *cmds[MAX_CMDS];
    int num_cmds = 0;

    char line[MAX_CMD_LEN];

    while ((fgets(line, MAX_CMD_LEN, stdin)) != NULL) {
        line[strcspn(line, "\n")] = '\0'; // Remove trailing newline
        char * cmd = malloc(strlen(line) + 1);
        if (cmd == NULL){
            fprintf(stderr, "Memory allocation cmd failed");
            exit(EXIT_FAILURE);
        }
        strcpy(cmd, line);
        cmds[num_cmds++] = cmd;  // Store a copy of the command
        if (num_cmds >= MAX_CMDS) {
            fprintf(stderr, "Max number of commands reached\n");
            break;
        }
    }

    if (num_cmds > 0) {
        execute_pipeline(cmds, num_cmds);
    }

    // Free memory
    for (int i = 0; i < num_cmds; i++) {
        // free(cmds[i]);
    }

    return 0;
}
